<?php


/**
 * WC Order Data Store: Stored in CPT.
 *
 * @version  3.0.0
 */
class WC_Order_Data_Store_CPT extends \Abstract_WC_Order_Data_Store_CPT implements \WC_Object_Data_Store_Interface, \WC_Order_Data_Store_Interface
{
    /**
     * Data stored in meta keys, but not considered "meta" for an order.
     *
     * @since 3.0.0
     * @var array
     */
    protected $internal_meta_keys = array('_customer_user', '_order_key', '_order_currency', '_billing_first_name', '_billing_last_name', '_billing_company', '_billing_address_1', '_billing_address_2', '_billing_city', '_billing_state', '_billing_postcode', '_billing_country', '_billing_email', '_billing_phone', '_shipping_first_name', '_shipping_last_name', '_shipping_company', '_shipping_address_1', '_shipping_address_2', '_shipping_city', '_shipping_state', '_shipping_postcode', '_shipping_country', '_shipping_phone', '_completed_date', '_paid_date', '_edit_lock', '_edit_last', '_cart_discount', '_cart_discount_tax', '_order_shipping', '_order_shipping_tax', '_order_tax', '_order_total', '_payment_method', '_payment_method_title', '_transaction_id', '_customer_ip_address', '_customer_user_agent', '_created_via', '_order_version', '_prices_include_tax', '_date_completed', '_date_paid', '_payment_tokens', '_billing_address_index', '_shipping_address_index', '_recorded_sales', '_recorded_coupon_usage_counts', '_download_permissions_granted', '_order_stock_reduced');
    /**
     * Getters for internal key in data stores.
     *
     * @var string[]
     */
    protected $internal_data_store_key_getters = array('_download_permissions_granted' => 'download_permissions_granted', '_recorded_sales' => 'recorded_sales', '_recorded_coupon_usage_counts' => 'recorded_coupon_usage_counts', '_order_stock_reduced' => 'stock_reduced', '_new_order_email_sent' => 'email_sent');
    /**
     * Return internal key getters name.
     *
     * @return string[]
     */
    public function get_internal_data_store_key_getters()
    {
    }
    /**
     * Method to create a new order in the database.
     *
     * @param WC_Order $order Order object.
     */
    public function create(&$order)
    {
    }
    /**
     * Read order data. Can be overridden by child classes to load other props.
     *
     * @param WC_Order $order Order object.
     * @param object   $post_object Post object.
     * @since 3.0.0
     */
    protected function read_order_data(&$order, $post_object)
    {
    }
    /**
     * Method to update an order in the database.
     *
     * @param WC_Order $order Order object.
     */
    public function update(&$order)
    {
    }
    /**
     * Helper method that updates all the post meta for an order based on it's settings in the WC_Order class.
     *
     * @param WC_Order $order Order object.
     * @since 3.0.0
     */
    protected function update_post_meta(&$order)
    {
    }
    /**
     * Given an initialized order object, update the post/postmeta records.
     *
     * @param WC_Order $order Order object.
     *
     * @return bool Whether the order was updated.
     */
    public function update_order_from_object($order)
    {
    }
    /**
     * Helper method to update order metadata from intialized order object.
     *
     * @param WC_Order $order Order object.
     */
    private function update_order_meta_from_object($order)
    {
    }
    /**
     * Excerpt for post.
     *
     * @param  WC_Order $order Order object.
     * @return string
     */
    protected function get_post_excerpt($order)
    {
    }
    /**
     * Get order key.
     *
     * @since 4.3.0
     * @param WC_order $order Order object.
     * @return string
     */
    protected function get_order_key($order)
    {
    }
    /**
     * Get amount already refunded.
     *
     * @param  WC_Order $order Order object.
     * @return float
     */
    public function get_total_refunded($order)
    {
    }
    /**
     * Get the total tax refunded.
     *
     * @param  WC_Order $order Order object.
     * @return float
     */
    public function get_total_tax_refunded($order)
    {
    }
    /**
     * Get the total shipping refunded.
     *
     * @param  WC_Order $order Order object.
     * @return float
     */
    public function get_total_shipping_refunded($order)
    {
    }
    /**
     * Finds an Order ID based on an order key.
     *
     * @param string $order_key An order key has generated by.
     * @return int The ID of an order, or 0 if the order could not be found
     */
    public function get_order_id_by_order_key($order_key)
    {
    }
    /**
     * Return count of orders with a specific status.
     *
     * @param  string $status Order status. Function wc_get_order_statuses() returns a list of valid statuses.
     * @return int
     */
    public function get_order_count($status)
    {
    }
    /**
     * Get all orders matching the passed in args.
     *
     * @deprecated 3.1.0 - Use wc_get_orders instead.
     * @see    wc_get_orders()
     *
     * @param  array $args List of args passed to wc_get_orders().
     *
     * @return array|object
     */
    public function get_orders($args = array())
    {
    }
    /**
     * Generate meta query for wc_get_orders.
     *
     * @param  array  $values List of customers ids or emails.
     * @param  string $relation 'or' or 'and' relation used to build the WP meta_query.
     * @return array
     */
    private function get_orders_generate_customer_meta_query($values, $relation = 'or')
    {
    }
    /**
     * Get unpaid orders after a certain date,
     *
     * @param  int $date Timestamp.
     * @return array
     */
    public function get_unpaid_orders($date)
    {
    }
    /**
     * Search order data for a term and return ids.
     *
     * @param  string $term Searched term.
     * @return array of ids
     */
    public function search_orders($term)
    {
    }
    /**
     * Gets information about whether permissions were generated yet.
     *
     * @param WC_Order|int $order Order ID or order object.
     * @return bool
     */
    public function get_download_permissions_granted($order)
    {
    }
    /**
     * Stores information about whether permissions were generated yet.
     *
     * @param WC_Order|int $order Order ID or order object.
     * @param bool         $set True or false.
     */
    public function set_download_permissions_granted($order, $set)
    {
    }
    /**
     * Gets information about whether sales were recorded.
     *
     * @param WC_Order|int $order Order ID or order object.
     * @return bool
     */
    public function get_recorded_sales($order)
    {
    }
    /**
     * Stores information about whether sales were recorded.
     *
     * @param WC_Order|int $order Order ID or order object.
     * @param bool         $set True or false.
     */
    public function set_recorded_sales($order, $set)
    {
    }
    /**
     * Gets information about whether coupon counts were updated.
     *
     * @param WC_Order|int $order Order ID or order object.
     * @return bool
     */
    public function get_recorded_coupon_usage_counts($order)
    {
    }
    /**
     * Stores information about whether coupon counts were updated.
     *
     * @param WC_Order|int $order Order ID or order object.
     * @param bool         $set True or false.
     */
    public function set_recorded_coupon_usage_counts($order, $set)
    {
    }
    /**
     * Whether email have been sent for this order.
     *
     * @param WC_Order|int $order Order ID or order object.
     *
     * @return bool               Whether email is sent.
     */
    public function get_email_sent($order)
    {
    }
    /**
     * Stores information about whether email was sent.
     *
     * @param WC_Order|int $order Order ID or order object.
     * @param bool         $set True or false.
     */
    public function set_email_sent($order, $set)
    {
    }
    /**
     * Return array of coupon_code => meta_key for coupon which have usage limit and have tentative keys.
     * Pass $coupon_id if key for only one of the coupon is needed.
     *
     * @param WC_Order $order     Order object.
     * @param int      $coupon_id If passed, will return held key for that coupon.
     *
     * @return array|string Key value pair for coupon code and meta key name. If $coupon_id is passed, returns meta_key for only that coupon.
     */
    public function get_coupon_held_keys($order, $coupon_id = \null)
    {
    }
    /**
     * Return array of coupon_code => meta_key for coupon which have usage limit per customer and have tentative keys.
     *
     * @param WC_Order $order Order object.
     * @param int      $coupon_id If passed, will return held key for that coupon.
     *
     * @return mixed
     */
    public function get_coupon_held_keys_for_users($order, $coupon_id = \null)
    {
    }
    /**
     * Add/Update list of meta keys that are currently being used by this order to hold a coupon.
     * This is used to figure out what all meta entries we should delete when order is cancelled/completed.
     *
     * @param WC_Order $order              Order object.
     * @param array    $held_keys          Array of coupon_code => meta_key.
     * @param array    $held_keys_for_user Array of coupon_code => meta_key for held coupon for user.
     *
     * @return mixed
     */
    public function set_coupon_held_keys($order, $held_keys, $held_keys_for_user)
    {
    }
    /**
     * Release all coupons held by this order.
     *
     * @param WC_Order $order Current order object.
     * @param bool     $save  Whether to delete keys from DB right away. Could be useful to pass `false` if you are building a bulk request.
     */
    public function release_held_coupons($order, $save = \true)
    {
    }
    /**
     * Gets information about whether stock was reduced.
     *
     * @param WC_Order|int $order Order ID or order object.
     * @return bool
     */
    public function get_stock_reduced($order)
    {
    }
    /**
     * Stores information about whether stock was reduced.
     *
     * @param WC_Order|int $order Order ID or order object.
     * @param bool         $set True or false.
     */
    public function set_stock_reduced($order, $set)
    {
    }
    /**
     * Get the order type based on Order ID.
     *
     * @since 3.0.0
     * @param int|WP_Post $order Order | Order id.
     *
     * @return string
     */
    public function get_order_type($order)
    {
    }
    /**
     * Get valid WP_Query args from a WC_Order_Query's query variables.
     *
     * @since 3.1.0
     * @param array $query_vars query vars from a WC_Order_Query.
     * @return array
     */
    protected function get_wp_query_args($query_vars)
    {
    }
    /**
     * Query for Orders matching specific criteria.
     *
     * @since 3.1.0
     *
     * @param array $query_vars query vars from a WC_Order_Query.
     *
     * @return array|object
     */
    public function query($query_vars)
    {
    }
    /**
     * Compile order response and set caches as needed for order ids.
     *
     * @param array    $order_ids  List of order IDS to compile.
     * @param array    $query_vars Original query arguments.
     * @param WP_Query $query      Query object.
     *
     * @return array Orders.
     */
    private function compile_orders($order_ids, $query_vars, $query)
    {
    }
    /**
     * Prime refund cache for orders.
     *
     * @param array $order_ids  Order Ids to prime cache for.
     * @param array $query_vars Query vars for the query.
     */
    private function prime_refund_caches_for_order($order_ids, $query_vars)
    {
    }
    /**
     * Prime following caches:
     *  1. item-$order_item_id   For individual items.
     *  2. order-items-$order-id For fetching items associated with an order.
     *  3. order-item meta.
     *
     * @param array $order_ids  Order Ids to prime cache for.
     * @param array $query_vars Query vars for the query.
     */
    private function prime_order_item_caches_for_orders($order_ids, $query_vars)
    {
    }
    /**
     * Prime cache for raw meta data for orders in bulk. Difference between this and WP built-in metadata is that this method also fetches `meta_id` field which we use and cache it.
     *
     * @param array $order_ids  Order Ids to prime cache for.
     * @param array $query_vars Query vars for the query.
     */
    private function prime_raw_meta_cache_for_orders($order_ids, $query_vars)
    {
    }
    /**
     * Return the order type of a given item which belongs to WC_Order.
     *
     * @since  3.2.0
     * @param  WC_Order $order Order Object.
     * @param  int      $order_item_id Order item id.
     * @return string Order Item type
     */
    public function get_order_item_type($order, $order_item_id)
    {
    }
}